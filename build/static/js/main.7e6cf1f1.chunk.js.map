{"version":3,"sources":["context.js","Alert.js","List.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","show","msg","type","alert","setAlert","task","date","details","time","about","entry","setEntry","localStorage","getItem","JSON","parse","list","setList","isEditing","setIsEditing","editId","setEditId","setInCourse","showAlert","useEffect","setItem","stringify","Provider","value","setTask","e","setDate","setLista","newItem","cleanUp","hour","setTime","setAbout","editItem","id","specificItem","find","item","yoquese","map","removeItem","filter","activo","useGlobalContext","useContext","Alert","timeout","setTimeout","clearTimeout","className","List","inCourse","isOver","setIsOver","onClick","style","color","textAlign","App","onSubmit","preventDefault","array","newDate","split","newHour","concat","i","length","parseInt","console","log","Date","normalToUTC","sort","a","b","Math","floor","random","now","name","placeholder","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e6cf1f1.chunk.js","sourcesContent":["/** @format */\r\n\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nconst AppContext = React.createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const getLocalStorage = () => {\r\n    let list = localStorage.getItem(\"list\");\r\n    if (list) {\r\n      return JSON.parse(localStorage.getItem(\"list\"));\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n  const [alert, setAlert] = useState({\r\n    show: false,\r\n    msg: \"\",\r\n    type: \"\",\r\n  });\r\n  const [entry, setEntry] = useState({\r\n    task: \"\",\r\n    date: \"\",\r\n    details: {\r\n      time: \"\",\r\n      about: \"\",\r\n    },\r\n  });\r\n  const [list, setList] = useState(getLocalStorage);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editId, setEditId] = useState(\"\");\r\n  const [inCourse, setInCourse] = useState(false);\r\n  const showAlert = (show = false, msg = \"\", type = \"\") => {\r\n    setAlert({ show, msg, type });\r\n  };\r\n\r\n  const activo = () => {\r\n    setInCourse(true);\r\n  };\r\n  const setTask = (e) => {\r\n    setEntry({ ...entry, task: e });\r\n  };\r\n  const setDate = (e) => {\r\n    setEntry({ ...entry, date: e });\r\n  };\r\n\r\n  const setTime = (e) => {\r\n    setEntry({ ...entry, details: { ...entry.details, time: e } });\r\n  };\r\n  const setAbout = (e) => {\r\n    setEntry({ ...entry, details: { ...entry.details, about: e } });\r\n  };\r\n\r\n  const setLista = (newItem) => {\r\n    setList([...list, newItem]);\r\n  };\r\n\r\n  const editItem = (id) => {\r\n    const specificItem = list.find((item) => item.id === id);\r\n    setIsEditing(true);\r\n    setEditId(id);\r\n\r\n    setEntry({\r\n      task: specificItem.task,\r\n      date: specificItem.date,\r\n      details: {\r\n        time: specificItem.hour,\r\n        about: specificItem.about,\r\n      },\r\n    });\r\n  };\r\n  const removeItem = (id) => {\r\n    showAlert(true, \"Item removed\", \"danger\");\r\n    setList(list.filter((item) => item.id !== id));\r\n  };\r\n  const yoquese = () => {\r\n    setList(\r\n      list.map((item) => {\r\n        if (item.id === editId) {\r\n          return {\r\n            task: entry.task,\r\n            date: entry.date,\r\n            hour: entry.details.time,\r\n            about: entry.details.about,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n    setEntry({ task: \"\", date: \"\", details: { hour: \"\", about: \"\" } });\r\n    setEditId(\"\");\r\n    setIsEditing(false);\r\n  };\r\n\r\n  function cleanUp() {\r\n    setEntry({ task: \"\", date: \"\", details: { hour: \"\", about: \"\" } });\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"list\", JSON.stringify(list));\r\n  }, [list]);\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        showAlert,\r\n        alert,\r\n        entry,\r\n        list,\r\n        setTask,\r\n        isEditing,\r\n        setDate,\r\n        setLista,\r\n        cleanUp,\r\n        setTime,\r\n        setAbout,\r\n        editItem,\r\n        yoquese,\r\n        removeItem,\r\n        activo,\r\n      }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n","/** @format */\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nexport const Alert = () => {\r\n  const { alert, list, showAlert } = useGlobalContext();\r\n  const { show, msg, type } = alert;\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      showAlert();\r\n    }, 5000);\r\n    return () => clearTimeout(timeout);\r\n  }, [list]);\r\n  return <section className={`alert alert-${type}`}>{alert.msg}</section>;\r\n};\r\nexport default Alert;\r\n","/** @format */\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { TiDelete } from \"react-icons/ti\";\r\n\r\nconst List = ({ id, task, about, hour, date }) => {\r\n  const { list, editItem, removeItem, activo, inCourse } = useGlobalContext();\r\n  const [isOver, setIsOver] = useState(false);\r\n\r\n  return (\r\n    <article key={id} className=\"list-item\">\r\n      <h3 onClick={() => setIsOver(!isOver)}>{task}</h3>\r\n      <div className=\"btn-container\">\r\n        {!isOver && (\r\n          <button className=\" edit-btn\" onClick={() => editItem(id)}>\r\n            <FaEdit />\r\n          </button>\r\n        )}\r\n        {!isOver && (\r\n          <button className=\" delete-btn\" onClick={() => removeItem(id)}>\r\n            <TiDelete />\r\n          </button>\r\n        )}\r\n      </div>\r\n      {isOver && (\r\n        <div className=\"item-info\">\r\n          <p>{about}</p>\r\n          <p className=\"important\">{date}</p>\r\n          <p style={{ color: \"orange\", textAlign: \"center\" }}>{hour}</p>\r\n        </div>\r\n      )}\r\n    </article>\r\n  );\r\n};\r\nexport default List;\r\n","/** @format */\n\nimport React from \"react\";\nimport { useGlobalContext } from \"./context\";\nimport Alert from \"./Alert\";\nimport List from \"./List\";\nimport { FaBookOpen } from \"react-icons/fa\";\n\nconst App = () => {\n  function uniqueID() {\n    return Math.floor(Math.random() * Date.now());\n  }\n\n  const {\n    entry,\n    alert,\n    list,\n    setTask,\n    showAlert,\n    isEditing,\n    setDate,\n    setLista,\n    cleanUp,\n    setTime,\n    setAbout,\n    yoquese,\n    activo,\n  } = useGlobalContext();\n  function normalToUTC(date, hour) {\n    let array = [];\n    var actualDate;\n    const newDate = date.split(\"-\");\n    const newHour = hour.split(\":\");\n\n    array = newDate.concat(newHour);\n    for (let i = 0; i < array.length; i++) {\n      array[i] = parseInt(array[i]);\n      console.log(array[i]);\n    }\n    const dateEntered = Date.parse(\n      new Date(array[0], array[1] - 1, array[2], array[3], array[4])\n    );\n\n    return dateEntered;\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!entry.task || !entry.date) {\n      if (!entry.task) {\n        showAlert(true, \"Please enter a value\", \"danger\");\n      } else if (!entry.date) {\n        showAlert(true, \"Please enter a date\", \"danger\");\n      }\n    } else if (\n      normalToUTC(\n        entry.date,\n        entry.details.time ? entry.details.time : \"00:00\"\n      ) < Date.parse(new Date())\n    ) {\n      showAlert(true, \"Please enter a valid date\", \"danger\");\n    } else if (entry && isEditing) {\n      yoquese();\n      list.sort((a, b) => (a.date > b.date ? 1 : b.date > a.date ? -1 : 0));\n      showAlert(true, \"Item changed\", \"success\");\n    } else {\n      const newItem = {\n        id: uniqueID(),\n        task: entry.task,\n        date: entry.date,\n        hour: entry.details.time,\n        about: entry.details.about,\n      };\n      setLista(newItem);\n      list.sort((a, b) => (a.date > b.date ? 1 : b.date > a.date ? -1 : 0));\n      cleanUp();\n      showAlert(\n        true,\n        `Task succesfully added!\n      ${entry.task} on ${entry.date} \n      `,\n        \"success\"\n      );\n    }\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>Personal Agenda</h1>\n      </header>\n      <section className=\"section-center\">\n        {alert.show && <Alert />}\n        <form className=\"form-control\" onSubmit={handleSubmit}>\n          <div className=\"box-container\">\n            <input\n              type=\"text\"\n              id=\"entryTask\"\n              name=\"entryTask\"\n              placeholder=\"e.g Company meeting\"\n              value={entry.task}\n              onChange={(e) => setTask(e.target.value)}></input>\n            <input\n              id=\"entryDate\"\n              name=\"entryDate\"\n              type=\"date\"\n              value={entry.date}\n              onChange={(e) => setDate(e.target.value)}></input>\n          </div>\n\n          <div className=\"box-container\">\n            {entry.task && (\n              <input\n                id=\"entryTime\"\n                name=\"entryTime\"\n                type=\"time\"\n                value={entry.details.time}\n                onChange={(e) => setTime(e.target.value)}></input>\n            )}\n            {entry.task && (\n              <textarea\n                id=\"about\"\n                name=\"entryAbout\"\n                type=\"text\"\n                value={entry.details.about}\n                onChange={(e) => setAbout(e.target.value)}></textarea>\n            )}\n          </div>\n\n          <button className=\"btn add-btn\">\n            {isEditing ? \"Save changes\" : \"Add item\"}\n          </button>\n        </form>\n        <div className=\"list-container\">\n          {list.map((item) => {\n            return <List key={item.id} {...item} />;\n          })}\n        </div>\n      </section>\n    </>\n  );\n};\nexport default App;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./context\";\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}